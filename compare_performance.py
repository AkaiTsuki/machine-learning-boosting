__author__ = 'jiachiliu'

import pylab as pl

boosting_spambase = [(0.88937093275488066, 0.11062906724511931, 0.94752031594136688),
                     (0.91323210412147504, 0.086767895878524945, 0.96624136097820301),
                     (0.93275488069414314, 0.067245119305856832, 0.97218424850003771),
                     (0.93709327548806942, 0.062906724511930592, 0.98032961190855883),
                     (0.91973969631236441, 0.080260303687635579, 0.97469051416419805),
                     (0.92407809110629069, 0.075921908893709325, 0.97617148932938358),
                     (0.93058568329718006, 0.069414316702819959, 0.97478544846965931),
                     (0.93492407809110634, 0.065075921908893705, 0.97843092579934654),
                     (0.92841648590021697, 0.071583514099783085, 0.97932330827067648),
                     (0.93058568329718006, 0.069414316702819959, 0.97903850535429482)]

bagging_spambase = [(0.88503253796095449, 0.11496746203904555, 0.86051349102579255),
                    (0.89154013015184386, 0.10845986984815618, 0.87202345576290585),
                    (0.89804772234273322, 0.1019522776572668, 0.87133008439320103),
                    (0.90238611713665939, 0.097613882863340565, 0.88484092079717791),
                    (0.90672451193058567, 0.093275488069414311, 0.88824834581402001),
                    (0.89804772234273322, 0.1019522776572668, 0.8793533816712219),
                    (0.90021691973969631, 0.099783080260303691, 0.8777289116050575),
                    (0.90021691973969631, 0.099783080260303691, 0.87705535084591235),
                    (0.89587852494577003, 0.10412147505422993, 0.87259796346923546),
                    (0.90238611713665939, 0.097613882863340565, 0.88133444272752648)]

active_learning = [(0.88937093275488066, 0.11062906724511931, 0.94752031594136688),
                   (0.92624728850325377, 0.073752711496746198, 0.97360826308194748),
                   (0.93926247288503251, 0.060737527114967459, 0.98156375787954697),
                   (0.93926247288503251, 0.060737527114967459, 0.98397508923824673),
                   (0.93926247288503251, 0.060737527114967459, 0.98258904837852201),
                   (0.93058568329718006, 0.069414316702819959, 0.98302574618364091),
                   (0.93926247288503251, 0.060737527114967459, 0.98498139287612951),
                   (0.93492407809110634, 0.065075921908893705, 0.98458266879319478),
                   (0.93926247288503251, 0.060737527114967459, 0.98351940457203579),
                   (0.93926247288503251, 0.060737527114967459, 0.98450672134882644)]

boosting_random = [(0.86767895878524948, 0.13232104121475055, 0.93459026353763031),
                   (0.90238611713665939, 0.097613882863340565, 0.96367813473076425),
                   (0.88720173535791758, 0.11279826464208242, 0.95775423407002214),
                   (0.88720173535791758, 0.11279826464208242, 0.95589352168299413),
                   (0.89154013015184386, 0.10845986984815618, 0.95997569681780093),
                   (0.90889370932754876, 0.091106290672451198, 0.96688691425533468),
                   (0.89370932754880694, 0.10629067245119306, 0.95405179615705693),
                   (0.89587852494577003, 0.10412147505422993, 0.95363408521303028),
                   (0.89804772234273322, 0.1019522776572668, 0.95452646768436078),
                   (0.90021691973969631, 0.099783080260303691, 0.95547581073896626)]

X = []
param = 0.05
while param < 0.5:
    X.append(param)
    param += 0.05

boosting_spambase_y = []
for rec in boosting_spambase:
    boosting_spambase_y.append(rec[1])

bagging_spambase_y = []
for rec in bagging_spambase:
    bagging_spambase_y.append(rec[1])

active_learning_y = []
for rec in active_learning:
    active_learning_y.append(rec[1])

boosting_crx_y = []
for rec in boosting_random:
    boosting_crx_y.append(rec[1])

boost = pl.plot(X, boosting_spambase_y, c="r", label='Boosting-Optimal')
#bag = pl.plot(X, bagging_spambase_y, c="g", label='Bagging')
active = pl.plot(X, active_learning_y, c="b", label='Active Learning')
pl.plot(X, boosting_crx_y, c='y', label='Boosting-Random')
pl.xlabel('c% of data')
pl.ylabel('test error')
pl.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3, ncol=2, mode="expand", borderaxespad=0.)
pl.show()

# pl.plot(X, boosting_crx_y, c='g', label='Boosting')
# pl.xlabel('c% of data')
# pl.ylabel('test error')
# pl.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3, ncol=2, mode="expand", borderaxespad=0.)
# pl.show()